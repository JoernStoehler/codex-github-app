name: Codex (reusable, minimal)

on:
  workflow_call:
    inputs:
      task:
        type: string
        required: false
    secrets:
      CODEX_APP_ID:
        required: true
      CODEX_APP_PRIVATE_KEY:
        required: true
      CODEX_AUTH_JSON_B64:
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  codex:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/devcontainers/universal:2-linux

    steps:
      # 1) Bot identity (token scoped to the CALLER repo)
      - name: Mint GitHub App token
        id: app
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.CODEX_APP_ID }}
          private-key: ${{ secrets.CODEX_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ github.event.repository.name }}

      - name: Export GH_TOKEN
        run: echo "GH_TOKEN=${{ steps.app.outputs.token }}" >> $GITHUB_ENV

      - name: Checkout caller repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app.outputs.token }}

      # 2) Determine context (PR vs Issue vs Manual); parse task + resume_full flag
      - name: Determine context
        id: ctx
        shell: bash
        run: |
          set -euo pipefail
          echo "repo=${{ github.repository }}" >> $GITHUB_OUTPUT
          BODY=""
          TASK=""
          RESUME_FULL="no"

          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            BODY='${{ github.event.comment.body }}'
            # accept either "@codex ..." or anything containing it (case-insensitive)
            LOW="$(echo "$BODY" | tr '[:upper:]' '[:lower:]')"
            # strip leading @codex (case-insensitive) if present
            TASK="$(echo "$BODY" | sed -E 's/^[[:space:]]*@[cC][oO][dD][eE][xX][[:space:]]*//')"
            [[ "$LOW" == *"resume full"* ]] && RESUME_FULL="yes"

            echo "comment_id=${{ github.event.comment.id }}" >> $GITHUB_OUTPUT
            if [[ "${{ toJson(github.event.issue.pull_request) }}" != "null" ]]; then
              PR_URL='${{ github.event.issue.pull_request.url }}'
              pr_json="$(gh api "$PR_URL")"
              echo "is_pr=yes" >> $GITHUB_OUTPUT
              echo "pr_number=$(echo "$pr_json" | jq -r '.number')" >> $GITHUB_OUTPUT
              echo "head_ref=$(echo "$pr_json" | jq -r '.head.ref')" >> $GITHUB_OUTPUT
              echo "base_ref=$(echo "$pr_json" | jq -r '.base.ref')" >> $GITHUB_OUTPUT
            else
              echo "is_pr=no" >> $GITHUB_OUTPUT
              echo "base_ref=${{ github.event.repository.default_branch }}" >> $GITHUB_OUTPUT
            fi
          else
            # manual dispatch via caller; accept input "task", else a placeholder
            TASK="${{ inputs.task || 'No task provided' }}"
            echo "is_pr=no" >> $GITHUB_OUTPUT
            echo "base_ref=${{ github.event.repository.default_branch }}" >> $GITHUB_OUTPUT
          fi

          echo "task=$TASK" >> $GITHUB_OUTPUT
          echo "resume_full=$RESUME_FULL" >> $GITHUB_OUTPUT

      # Low-noise progress signal on the triggering comment
      - name: React ðŸ‘€ (optional)
        if: ${{ github.event_name == 'issue_comment' }}
        run: |
          gh api repos/${{ steps.ctx.outputs.repo }}/issues/comments/${{ steps.ctx.outputs.comment_id }}/reactions \
            -H "Accept: application/vnd.github+json" -f content=eyes

      # 3) Prepare working branch + draft PR if needed
      - name: Prepare branch / PR
        id: br
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ steps.ctx.outputs.is_pr }}" == "yes" ]]; then
            git fetch origin "${{ steps.ctx.outputs.head_ref }}"
            git checkout -B "${{ steps.ctx.outputs.head_ref }}" "origin/${{ steps.ctx.outputs.head_ref }}"
            echo "branch=${{ steps.ctx.outputs.head_ref }}" >> $GITHUB_OUTPUT
            echo "pr=${{ steps.ctx.outputs.pr_number }}" >> $GITHUB_OUTPUT
            # progress labels on PR
            gh issue edit ${{ steps.ctx.outputs.pr_number }} --add-label "codex:queued"
          else
            git fetch origin "${{ steps.ctx.outputs.base_ref }}"
            SLUG="$(echo "${{ steps.ctx.outputs.task }}" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9- ' | tr ' ' '-' | cut -c1-40)"
            BR="codex/${SLUG:-task}-${GITHUB_RUN_ID}"
            git checkout -B "$BR" "origin/${{ steps.ctx.outputs.base_ref }}"
            gh pr create --draft -B "${{ steps.ctx.outputs.base_ref }}" -H "$BR" \
              --title "codex: ${{ steps.ctx.outputs.task }}" \
              --body "Spawned by codex. Progress tracked here."
            PRN="$(gh pr view --json number -q .number)"
            echo "branch=$BR" >> $GITHUB_OUTPUT
            echo "pr=$PRN" >> $GITHUB_OUTPUT
          fi

      - name: Label swap â†’ provisioning
        if: ${{ steps.ctx.outputs.is_pr == 'yes' }}
        run: gh issue edit ${{ steps.ctx.outputs.pr_number }} --remove-label "codex:queued" --add-label "codex:provisioning"

      # 4) Check Run
      - name: Create Check Run (in_progress)
        id: checks
        shell: bash
        run: |
          SHA="$(git rev-parse HEAD)"
          RESP="$(gh api -X POST repos/${{ steps.ctx.outputs.repo }}/check-runs \
            -H "Accept: application/vnd.github+json" \
            -f name="Codex/Agent" -f head_sha="$SHA" -f status="in_progress")"
          echo "check_id=$(echo "$RESP" | jq -r '.id')" >> $GITHUB_OUTPUT

      # 5) Lifecycle (if scripts exist and are executable)
      - name: Run lifecycle scripts (optional)
        shell: bash
        run: |
          set -euo pipefail
          for s in .devcontainer/post-create.sh .devcontainer/post-start.sh; do
            if [[ -x "$s" ]]; then echo "Running $s"; "$s"; fi
          done

      # 6) Codex auth + install
      - name: Restore Codex OAuth (ChatGPT plan)
        run: |
          mkdir -p "$HOME/.codex"
          echo "${{ secrets.CODEX_AUTH_JSON_B64 }}" | base64 -d > "$HOME/.codex/auth.json"
          printf 'preferred_auth_method = "chatgpt"\n' >> "$HOME/.codex/config.toml"
      - name: Install Codex CLI
        run: |
          npm i -g @openai/codex
          codex --version || true

      # 7) Auto-resume (chat); overlay only if comment said "resume full"
      - name: Maybe download previous artifacts
        id: resume
        shell: bash
        env:
          BRANCH: ${{ steps.br.outputs.branch }}
        run: |
          set -euo pipefail
          RUN_ID="$(gh run list -w "${{ github.workflow }}" -b "$BRANCH" -s completed -L 20 --json databaseId,headBranch \
            --jq 'map(select(.headBranch=="'"$BRANCH"'")) | .[0].databaseId' || true)"
          echo "prev_run=$RUN_ID" >> $GITHUB_OUTPUT
          if [[ -n "$RUN_ID" && "$RUN_ID" != "null" ]]; then
            gh run download "$RUN_ID" || true
            if [[ "${{ steps.ctx.outputs.resume_full }}" == "yes" ]]; then
              tar -I zstd -xf overlay.tar.zst 2>/dev/null || tar -I zstd -xf artifacts/overlay.tar.zst || true
              git apply --index workspace.patch 2>/dev/null || git apply --index artifacts/workspace.patch || true
            fi
          fi

      - name: Label swap â†’ running
        if: ${{ steps.ctx.outputs.is_pr == 'yes' }}
        run: gh issue edit ${{ steps.ctx.outputs.pr_number }} --remove-label "codex:provisioning" --add-label "codex:running"

      # 8) Run Codex (non-interactive, --yolo)
      - name: Run Codex
        id: run
        shell: bash
        run: |
          set -euo pipefail
          MSG="Task: ${{ steps.ctx.outputs.task }}"
          codex --yolo exec "$MSG" > Final-Message.md 2>&1 || true

      # 9) Deterministic fallback: commit/push
      - name: Commit & push if changes
        id: push
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "codex-github-app[bot]"
          git config user.email "codex-github-app[bot]@users.noreply.github.com"
          if ! git diff --quiet; then
            git add -A
            git commit -m "codex: ${{ steps.ctx.outputs.task }} [run ${GITHUB_RUN_ID}]"
            git push origin HEAD
          fi

      # 10) Collect traces (and overlay only if leftovers)
      - name: Collect artifacts
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts
          find "$HOME/.codex" -type f -name 'rollout-*.jsonl' -printf '%T@ %p\n' \
            | sort -nr | head -n 10 | awk '{print $2}' | xargs -I{} cat "{}" > artifacts/trace.jsonl || true
          cp -f Final-Message.md artifacts/ || true
          if ! git diff --quiet; then
            git diff --binary > artifacts/workspace.patch || true
            git ls-files --others --exclude-standard -z \
              | tar --zstd -cf artifacts/overlay.tar.zst --no-recursion --null -T - || true
          fi

      - name: Upload artifacts (fixed 90d)
        uses: actions/upload-artifact@v4
        with:
          name: codex-pr${{ steps.br.outputs.pr || 'none' }}-run${{ github.run_id }}
          path: artifacts/
          retention-days: 90

      # 11) Finish
      - name: Finalize Check Run
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          CONC="success"; [[ "${{ job.status }}" == "success" ]] || CONC="failure"
          gh api -X PATCH repos/${{ steps.ctx.outputs.repo }}/check-runs/${{ steps.checks.outputs.check_id }} \
            -H "Accept: application/vnd.github+json" \
            -f status="completed" -f conclusion="$CONC" \
            -f completed_at="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"

      - name: "Label: done/failed"
        if: ${{ always() && steps.ctx.outputs.is_pr == 'yes' }}
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            gh issue edit ${{ steps.ctx.outputs.pr_number }} --remove-label "codex:running" --add-label "codex:done"
          else
            gh issue edit ${{ steps.ctx.outputs.pr_number }} --remove-label "codex:running" --add-label "codex:failed"
          fi

      - name: React ðŸŽ‰/ðŸ‘Ž (optional)
        if: ${{ github.event_name == 'issue_comment' && always() }}
        run: |
          EMOJI="hooray"; [[ "${{ job.status }}" == "success" ]] || EMOJI="-1"
          gh api repos/${{ steps.ctx.outputs.repo }}/issues/comments/${{ steps.ctx.outputs.comment_id }}/reactions \
            -H "Accept: application/vnd.github+json" -f content="$EMOJI"
